<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lern Blog Blog</title>
        <link>https://No0ne155.github.io/ef_info/</link>
        <description>Lern Blog Blog</description>
        <lastBuildDate>Mon, 23 Jan 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>de</language>
        <item>
            <title><![CDATA[Finaler Blogbeitrag NumTrip]]></title>
            <link>https://No0ne155.github.io/ef_info/2023/01/23/finaler-blogbeitrag-numtrip</link>
            <guid>/2023/01/23/finaler-blogbeitrag-numtrip</guid>
            <pubDate>Mon, 23 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Seit der erstellung des NumTrip.py games am 16. September 2022 arbeiteten wir immer wieder an diesem NumTrip Spiel. Doch was ist das überhaupt?]]></description>
            <content:encoded><![CDATA[<p>Seit der erstellung des NumTrip.py games am 16. September 2022 arbeiteten wir immer wieder an diesem NumTrip Spiel. Doch was ist das überhaupt?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="das-spiel">Das Spiel<a class="hash-link" href="#das-spiel" title="Direkter Link zur Überschrift">​</a></h2><p>Ziel des Spieles <em>NumTrip</em> ist es, ein Feld mit dem Wert 128 (oder eine andere selbst festgelegte zweierpotenz) zu erreichen. Zum beginn hat man nur ein Feld mit zufälligen zweierpotenzen. Indem man koordinaten des Feldes aussucht, das Nachbarfelder mit dem gleichen Wert hat, kann man den Wert dieses Feldes verdoppeln, und die umliegenden Felder verschwinden lassen. Nun generieren oben am Feld neue Zahlen. So kann man versuchen, die Felder so lange zu kombinieren, bis man 128 erreicht hat. So <strong>gewinnt</strong> man das Spiel.</p><p>Jedoch kann man auch verlieren. Wenn es keine Felder mehr gibt, die man kombinieren kann, hat man <strong>Verloren</strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="umsetzung">Umsetzung<a class="hash-link" href="#umsetzung" title="Direkter Link zur Überschrift">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="voraussetzungen">Voraussetzungen<a class="hash-link" href="#voraussetzungen" title="Direkter Link zur Überschrift">​</a></h3><p>Um meine Version des NumTrip zu spielen, braucht man eine Applikation (z.b. VisualStudioCode) um ein Python Programm laufen zu lassen. Unsere verwendete Python Version ist <em>Python 3.10.6</em>. Meinen Code findet man auf <a href="https://github.com/No0ne155/ef_info/blob/main/NumTrip/NumTrip_FINAL.py" target="_blank" rel="noopener noreferrer">GitHub</a> Diesen kann man in ein Dokument in VSCode kopieren, dass die endung <code>.py</code> hat. Damit definiert man, dass es ein Python Dokument ist. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="top-down-entwurf">Top-Down Entwurf<a class="hash-link" href="#top-down-entwurf" title="Direkter Link zur Überschrift">​</a></h3><p>Um ein Grosses Projekt besser erfüllen zu können, verwendet man einen sogenannten Top-Down entwurf. Mein Top-Down Entwurf hat auf der Obersten Ebene das NumTrip-Game. Dies teilt man nun in immer kleinere Teilprobleme auf, bis man viele kleine dinge hat, die einfacher sind. Diese fügt man dann zusammen, damit man ein komplettes Projekt hat.
<img loading="lazy" src="/ef_info/assets/images/topdown-5792a9fb09895f79f25d13d161db8560.png" width="1716" height="801" class="img_ev3q">
z.b. im Bereich Feld, habe ich für das Generieren des Feldes die Funktion <code>generatefield()</code> erstellt. Diese Funktion generiert zufallszahlen, und fügt die in die <code>spielfeld</code> Liste. Für das Ausgeben des Feldes habe ich die Funktion <code>printfield()</code> erstellt. Diese Druckt das Design des Spielfeldes, und entsprechend der grösse der Zahl, wird die Funktion so angepasst, dass das Design nicht durcheinander kommt. Diese beiden Funktionen zusammen ergeben das Spielfeld. Zum schluss werden die funktionen an der richtigen Stelle im Code oder in anderen Funktionen aufgerufen. So ähnlich funktioniert es auch mit allen anderen Teilbereichen die im Top-Down entwurf geschrieben sind.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="konzept-nachbarprüfung">Konzept Nachbarprüfung<a class="hash-link" href="#konzept-nachbarprüfung" title="Direkter Link zur Überschrift">​</a></h3><p>Im Spiel verwende ich viele sogenannte Algorithmen. Einer davon wird z.b. für die überprüfung ob eine Nachbarzelle vorhanden ist eingesetzt. Die Funktion wird benötigt, denn wir wollen die zahl ja nur verdoppeln, wenn sie auch mindestens ein Feld rundherum hat, dass den gleichen Wert hat. Dafür erstellen wir die folgende Funktion: <code>validateneighbour(y, x)</code> Dabei sind <code>y</code> und <code>x</code> Parameter die man beim Aufrufen der funktion mitgibt. In diesem fall entsprechen die Parameter den Koordinaten im Spielfeld. Die Parameter sind in der gewählten Reihenfolge, da <code>y</code> für die Zeile steht, und <code>x</code> für die Spalte.</p><p>Beim Aufrufen der Funktion wird überprüft, ob die Funktion <code>True</code> zurückgibt. Nun muss die funktion <code>True</code> zurückgeben, wenn ein Nachbar vorhanden ist, sonst muss <code>False</code> zurückgegeben werden. Im ersten schritt prüfen wir ob in die <code>x-1</code> richtung ein Nachbar ist. Damit kein List-Index ERROR erscheint, prüfen wir, ob die Zahl grösser als <code>1</code> ist, da wir <code>1</code> subtrahieren, und nicht ins Negative wollen. Diese überprüfung findet mit </p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>statt. Wenn dieses Statement zutrifft, geht es weiter zur überprüfung, ob die ausgewählten Koordinaten den gleichen Wert gespeichert haben, wie die selbe Koordinate aber mit <code>x-1</code>. </p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain">   </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Dies wird nun in alle anderen Richtungen genau gleich angewendet. Natürlich mit anderen werten.
Wenn nie ein Feld den gleichen Wert hat, wird zum schluss <code>False</code> zurückgegeben.Gesamt sieht der Algorithmus dann so aus:</p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">validateneighbour</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain">                          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> spielfeld</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="probleme">Probleme<a class="hash-link" href="#probleme" title="Direkter Link zur Überschrift">​</a></h2><p>Mein grösstes Problem war, dass ich gewisse funktionen so aufbaute, dass sie Funktionierten, aber nicht mit künftigen Funktionen kompatibel waren. So kam ich oft an den Punkt, dass ich vieles überarbeiten musste, da ich früher nicht gut genug arbeitete.</p><p>Es kam sogar so weit, dass ich Fehler hatte, nicht wusste woher, die Logik keinen Sinn mehr ergab, so dass ich mich entschied, von vorne anzufangen. Ich verwendete natürlich gewisse funktionen wieder, aber ich fing wieder von 0 an, damit ich alles nochmals Schritt für Schritt durchgehen kann. Z.b. fügte ich in der <code>printfield()</code> funktion die neuen, angepassten Strings (der Zahlenwert mit passender anzahl leerzeichen) HINTEN an die Liste, löschte sie jedoch nie, weshalb sich mein Spielfeld nicht Veränderte, egal was ich als Input gab. Solche kleine Fehler wären mir sonst nicht aufgefallen.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tipps">Tipps:<a class="hash-link" href="#tipps" title="Direkter Link zur Überschrift">​</a></h2><p>Wenn du auch so ein Programm schreibst, überleg dir manchmal zuerst, was du später auch noch in die Funktion einfügen musst, damit du sie Später nicht nochmals schreiben musst. </p><p>Ebenfalls ist es hilfreich, wenn du deinen Funktionen und Variabeln namen gibst, die dir Klar machen, was sie tun, sodass du den Überblick behälst. Aber mach die Namen auch nicht zu lange, denn es kann sehr mühsam sein, den namen <code>spielfeldnice[playerinputY][playerinputX]</code> in einer Funktion 4 mal zu schreiben.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fazit">Fazit<a class="hash-link" href="#fazit" title="Direkter Link zur Überschrift">​</a></h2><p>Mit mehr Zeit, wären noch viele Features mehr möglich gewesen. Da man aber nicht immer viel Zeit hat, sich die Zeit nicht nimmt, oder ein Problem hat, dass sich einfach nicht lösen will, bin ich ganz zufrieden mit meinem Resultat. Am Anfang stockte es, doch als ich im Neugeschriebenen Programm (fast) alle Probleme gefunden hatte, ging alles sehr schnell. Weitere Features zu implementieren wären nicht die Komplizierteste sache, jedoch muss man es machen, und nicht nur darüber Nachdenken.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Arbeiten am Numtrip]]></title>
            <link>https://No0ne155.github.io/ef_info/2022/12/02/arbeiten-am-numtrip</link>
            <guid>/2022/12/02/arbeiten-am-numtrip</guid>
            <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Besprechung Benutzereingaben]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="besprechung-benutzereingaben">Besprechung Benutzereingaben<a class="hash-link" href="#besprechung-benutzereingaben" title="Direkter Link zur Überschrift">​</a></h2><p>Ich verglich mit Thomas den Code, und wir beide verwenden ein sehr ähnliches system, was die Besprechung kurz hielt.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="arbeiten-numtrip">Arbeiten Numtrip<a class="hash-link" href="#arbeiten-numtrip" title="Direkter Link zur Überschrift">​</a></h2><p>Als erstes habe ich den Auftrag gelesen, und ausgeführt.
Ich passte das Programm von Wikipedia auf mein Programm an. Der Code sah wie folgt aus:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def checkandremove(x, y, oldvalue, newvalue):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if spielfeld[x][y] == oldvalue:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        spielfeld[x][y] = newvalue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        checkandremove(x,y+1,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        checkandremove(x,y-1,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        checkandremove(x+1,y,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        checkandremove(x-1,y,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        game()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Nach ein paar tests bemerkte ich, dass wenn z.b. <code>x</code> bereits <code>4</code> ist, und dann <code>x+1</code> überprüft wird, dies ausserhalb der liste ist. Deshalb änderte ich den code zu dem:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def checkandremove(x, y, oldvalue, newvalue):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if spielfeld[x][y] == oldvalue:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        spielfeld[x][y] = newvalue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if y+1 &lt;= 4:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            checkandremove(x,y+1,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if y-1 &gt;= 0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            checkandremove(x,y-1,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if x+1 &gt;= 0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            checkandremove(x+1,y,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if x-1 &lt;= 4:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            checkandremove(x-1,y,oldvalue,newvalue)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        game()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Nach weiteren Tests, fiel mir noch ein grösseres noch nicht gelöstes Problem auf.</p><p><img loading="lazy" src="/ef_info/assets/images/numtrip_problem0-b6318b38293e381cfead0c12709d08b6.png" width="584" height="529" class="img_ev3q"></p><p>Nehmen wir dieses Feld. Wenn nun der Player den input <code>X = 1, Y = 1</code> eingibt, kommt dieses Feld heraus:</p><p><img loading="lazy" src="/ef_info/assets/images/numtrip_problem1-f823644abc1c31114c4dd076011f5be7.png" width="590" height="529" class="img_ev3q"></p><p>Ich fragte mich warum. Nach dem Betrachten des Codes wusste ich es.
Auf dieser Darstellung zeige ich es.</p><p><img loading="lazy" src="/ef_info/assets/images/numtrip_problem2-857498581d2e084e0e33e5a17c56e943.png" width="589" height="535" class="img_ev3q"></p><p>Als erstes wird von <code>1, 1</code> aus nach rechts geprüft. Auf diesem Feld wird dann als nächstes nach unten geprüft, und danach nach rechts (wo kein passendes Feld ist), und danach nach links, wo die letzte 4 ist, die entfernt wird. Von diesem Feld aus wird nun in alle richtungen überprüft, jedoch keine 4 mehr entdeckt. Die auf dem Bild Blau markierten Pfeile sollten noch geprüft und entfernt werden, dies passiert jedoch nicht, aufgrund der reihenfolge im code.</p><p>Ich überlegte den rest der Zeit noch daran, fand jedoch keine Lösung für den Code. Jedoch kann man dieses Beispiel lösen, indem der Spieler die Position <code>X = 0, Y = 3</code> wählt.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lösung-wird-gesucht">Lösung wird gesucht!!!<a class="hash-link" href="#lösung-wird-gesucht" title="Direkter Link zur Überschrift">​</a></h3>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Wiedereinstieg Python]]></title>
            <link>https://No0ne155.github.io/ef_info/2022/08/26/wiedereinstieg-python</link>
            <guid>/2022/08/26/wiedereinstieg-python</guid>
            <pubDate>Fri, 26 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Heute, beim 2. mal EF, haben wir wieder mit Python angefangen, und einen Theorieblock gehabt.]]></description>
            <content:encoded><![CDATA[<p>Heute, beim 2. mal EF, haben wir wieder mit Python angefangen, und einen Theorieblock gehabt.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="theorieblock">Theorieblock<a class="hash-link" href="#theorieblock" title="Direkter Link zur Überschrift">​</a></h2><p>Im Theorieblock haben wir <strong>Programmiersprachen</strong> angeschaut. Vor allem wie sie aufgebaut sind in den <strong>Sprachstufen</strong>. Ich will nicht einfach die Website abschreiben, also hier der Link: <a href="https://ofi.gbsl.website/24ef/Programmieren/Programmiersprachen" target="_blank" rel="noopener noreferrer">Programmiersprachen</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="python">Python<a class="hash-link" href="#python" title="Direkter Link zur Überschrift">​</a></h2><p>Wir haben angefangen mit <strong>Turtle</strong> Python zu repetieren. Zum glück ist noch mehr oder weniger alles Präsent, jedoch gab es einige Tippfehler. Das liegt jedoch daran, dass die Übung fehlt. Am meisten ging der <code>:</code> bei einer <code>for</code> Schleife vergessen. Am zweitmeisten passierte ein fehler beim tippen von <code>forward</code>, <code>left</code> oder <code>right</code>. Jedoch kann man ja einfach <code>fd</code>, <code>lt</code> oder <code>rt</code> verwenden, wodurch das sehr minimiert wurde. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="blog">Blog<a class="hash-link" href="#blog" title="Direkter Link zur Überschrift">​</a></h2><p>Am schluss haben wir noch angefangen diesen Blog hier zu schreiben. Ich schreibe aber nicht gerne, weshalb er nicht sehr Kreativ ist.</p>]]></content:encoded>
        </item>
    </channel>
</rss>