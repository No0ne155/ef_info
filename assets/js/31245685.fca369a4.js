"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[870],{7750:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/03/10/arbeiten-an-API","metadata":{"permalink":"/ef_info/2023/03/10/arbeiten-an-API","editUrl":"https://github.com/No0ne155/ef_info/tree/main/blog/2023-03-10-arbeiten-an-API.md","source":"@site/blog/2023-03-10-arbeiten-an-API.md","title":"Arbeiten an einer API","description":"10.03.2023","date":"2023-03-10T00:00:00.000Z","formattedDate":"10. M\xe4rz 2023","tags":[],"readingTime":1.435,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Finaler Blogbeitrag NumTrip","permalink":"/ef_info/2023/01/23/finaler-blogbeitrag-numtrip"}},"content":"### 10.03.2023\\nHeute starteten wir, unsere eigene Simple API zu erstellen. Wir folgten der Anleitung auf der Website Schritt f\xfcr schritt, um die API zu erstellen.\\n\\n## Postman\\n\\nMit dem Drittanbietertool Postman kann man eine Website aufrufen, ohne einen Browser zu verwenden. Ebenfalls kann man einfach Header-Informationen ver\xe4ndern, und auch andere Parameter ver\xe4ndern.\\n\\n![](images/postman.png)\\n\\nSo sieht Postman aus. Zuoberst im Bild kann man die Abzufragende URL eingeben. Die Entsprechende Header-Information wird automatisch angef\xfcgt, wenn man darunter im Tab Parameter z.b. beim KEY text den parameter VALUE ver\xe4ndert.\\n\\nZuunterst siehtman die zur\xfcckgekriegte JSON-Information, die von unserer API ver\xe4ndert wurde, und als `msg` zur\xfcckgegeben wird.\\n\\n## Verwenden von NODE-RED\\n\\nAuf NODE_RED ist unsere eigentliche API.\\n\\n![](images/node-red-api.png)\\n\\nDie API besteht aus 3 eigentlichen Teilen.\\nzuerst wird die URL `/api/to-emoji-lang` (Die seite selbst) aufgerufen. Danach wird im ersten `debug in` in die Konsole ausgegeben, was f\xfcr information in der URL erhalten ist. Danach l\xe4uft genau diese information durch die Funktion 4.\\n\\n![](images/function4.png)\\n\\nDiese Funktion funktioniert folgendermassen:\\n\\nAls erstes wird `emoji` gleichgesetzt mit dem Text des Inhaltes der von der Website abgerufen wird. Danach wird in diesem Text jedes Hello durch ein Winkesmiley und jedes world durch eine Weltkugel ersetzt. Danach wird die payload der nachricht zu emoji gesetzt, und diese Nachricht zur\xfcckgegeben.\\n\\nNun gibt es noch die Kontrolle im zweiten `debug out` wo wir in der Konsole sehen k\xf6nnen, dass es funktioniert hat. \\n\\nZum grossen Finale wird nun eine http Response gemacht, damit Postman auch unsere von der API ver\xe4nderte Nachricht bekommt.\\n\\n## Schlusswort / Fazit\\n\\nDie API auf unserem NODE-RED server kommuniziert mit Postman. Die beiden Individuellen Programme \xfcbersetzen unsere Menschensprache in Emojis, und tun dies, ohne dass wir selbst etwas tun m\xfcssen. Die Automation finde ich pers\xf6nlich sehr toll."},{"id":"/2023/01/23/finaler-blogbeitrag-numtrip","metadata":{"permalink":"/ef_info/2023/01/23/finaler-blogbeitrag-numtrip","editUrl":"https://github.com/No0ne155/ef_info/tree/main/blog/2023-01-23-finaler-blogbeitrag-numtrip.md","source":"@site/blog/2023-01-23-finaler-blogbeitrag-numtrip.md","title":"Finaler Blogbeitrag NumTrip","description":"Seit der Erstellung des NumTrip.py Games am 16. September 2022 arbeiteten wir immer wieder an diesem NumTrip Spiel. Doch was ist das \xfcberhaupt?","date":"2023-01-23T00:00:00.000Z","formattedDate":"23. Januar 2023","tags":[],"readingTime":4.64,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Arbeiten an einer API","permalink":"/ef_info/2023/03/10/arbeiten-an-API"},"nextItem":{"title":"Arbeiten am Numtrip","permalink":"/ef_info/2022/12/02/arbeiten-am-numtrip"}},"content":"Seit der Erstellung des NumTrip.py Games am 16. September 2022 arbeiteten wir immer wieder an diesem NumTrip Spiel. Doch was ist das \xfcberhaupt?\\n## Das Spiel\\nZiel des Spieles *NumTrip* ist es, ein Feld mit dem Wert 128 (oder eine andere selbst festgelegte Zweierpotenz) zu erreichen. Zum Beginn hat man nur ein Feld mit zuf\xe4lligen Zweierpotenzen. Indem man Koordinaten des Feldes aussucht, das Nachbarfelder mit dem gleichen Wert hat, kann man den Wert dieses Feldes verdoppeln, und die umliegenden Felder verschwinden lassen. Nun generieren oben am Feld neue Zahlen. So kann man versuchen, die Felder so lange zu kombinieren, bis man 128 erreicht hat. So **gewinnt** man das Spiel.\\n\\nJedoch kann man auch verlieren. Wenn es keine Felder mehr gibt, die man kombinieren kann, hat man **verloren**.\\n\\n## Umsetzung\\n### Voraussetzungen\\nUm meine Version des NumTrip zu spielen, braucht man eine Applikation (z.b. VisualStudioCode) um ein Python Programm laufen zu lassen. Unsere verwendete Python Version ist *Python 3.10.6*. Meinen Code findet man auf [GitHub](https://github.com/No0ne155/ef_info/blob/main/NumTrip/NumTrip_FINAL.py) Diesen kann man in ein Dokument in VSCode kopieren, dass die Endung `.py` hat. Damit definiert man, dass es ein Python Dokument ist. \\n### Top-Down Entwurf\\nUm ein grosses Projekt besser erf\xfcllen zu k\xf6nnen, verwendet man einen sogenannten Top-Down Entwurf. Mein Top-Down Entwurf hat auf der obersten Ebene das NumTrip-Game. Dies teilt man nun in immer kleinere Teilprobleme auf, bis man viele kleine Dinge hat, die einfacher sind. Diese f\xfcgt man dann zusammen, damit man ein komplettes Projekt hat.\\n![](./images/topdown.png)\\nz.b. im Bereich Feld, habe ich f\xfcr das Generieren des Feldes die Funktion `generatefield()` erstellt. Diese Funktion generiert zufallszahlen, und f\xfcgt die in die `spielfeld` Liste. F\xfcr das Ausgeben des Feldes habe ich die Funktion `printfield()` erstellt. Diese Druckt das Design des Spielfeldes, und entsprechend der Gr\xf6sse der Zahl, wird die Funktion so angepasst, dass das Design nicht durcheinander kommt. Diese beiden Funktionen zusammen ergeben das Spielfeld. Zum Schluss werden die Funktionen an der richtigen Stelle im Code oder in anderen Funktionen aufgerufen. So \xe4hnlich funktioniert es auch mit allen anderen Teilbereichen die im Top-Down Entwurf geschrieben sind.\\n### Konzept Nachbarpr\xfcfung\\nIm Spiel verwende ich viele sogenannte Algorithmen. Einer davon wird z.b. f\xfcr die \xdcberpr\xfcfung ob eine Nachbarzelle vorhanden ist eingesetzt. Die Funktion wird ben\xf6tigt, denn wir wollen die Zahl ja nur verdoppeln, wenn sie auch mindestens ein Feld rundherum hat, dass den gleichen Wert hat. Daf\xfcr erstellen wir die folgende Funktion: `validateneighbour(y, x)` Dabei sind `y` und `x` Parameter die man beim Aufrufen der Funktion mitgibt. In diesem Fall entsprechen die Parameter den Koordinaten im Spielfeld. Die Parameter sind in der gew\xe4hlten Reihenfolge, da `y` f\xfcr die Zeile steht, und `x` f\xfcr die Spalte.\\n\\nBeim Aufrufen der Funktion wird \xfcberpr\xfcft, ob die Funktion `True` zur\xfcckgibt. Nun muss die Funktion `True` zur\xfcckgeben, wenn ein Nachbar vorhanden ist, sonst muss `False` zur\xfcckgegeben werden. Im ersten Schritt pr\xfcfen wir ob in die `x-1` Richtung ein Nachbar ist. Damit kein List-Index ERROR erscheint, pr\xfcfen wir, ob die Zahl gr\xf6sser als `1` ist, da wir `1` subtrahieren, und nicht ins Negative wollen. Diese \xdcberpr\xfcfung findet mit \\n``` py \\nif x >= 1:\\n```\\nstatt. Wenn dieses Statement zutrifft, geht es weiter zur \xdcberpr\xfcfung, ob die ausgew\xe4hlten Koordinaten den gleichen Wert gespeichert haben, wie die selbe Koordinate aber mit `x-1`. \\n```py\\nif spielfeld[x-1][y] == spielfeld[x][y]:\\n            return True   \\n```\\nDies wird nun in alle anderen Richtungen genau gleich angewendet. Nat\xfcrlich mit anderen werten.\\nWenn nie ein Feld den gleichen Wert hat, wird zum Schluss `False` zur\xfcckgegeben. Gesamt sieht der Algorithmus dann so aus:\\n```py\\ndef validateneighbour(y,x):\\n    if x >= 1: \\n        if spielfeld[x-1][y] == spielfeld[x][y]: \\n            return True                          \\n    if x <= 3:\\n        if spielfeld[x+1][y] == spielfeld[x][y]:\\n            return True\\n    if y >= 1:\\n        if spielfeld[x][y-1] == spielfeld[x][y]:\\n            return True\\n    if y <= 3:\\n        if spielfeld[x][y+1] == spielfeld[x][y]:\\n            return True\\n    return False\\n```\\n## Probleme\\nMein gr\xf6sstes Problem war, dass ich gewisse Funktionen so aufbaute, dass sie Funktionierten, aber nicht mit k\xfcnftigen Funktionen kompatibel waren. So kam ich oft an den Punkt, dass ich vieles \xfcberarbeiten musste, da ich fr\xfcher nicht gut genug arbeitete.\\n\\nEs kam sogar so weit, dass ich Fehler hatte, nicht wusste woher, die Logik keinen Sinn mehr ergab, so dass ich mich entschied, von vorne anzufangen. Ich verwendete nat\xfcrlich gewisse Funktionen wieder, aber ich fing wieder von 0 an, damit ich alles nochmals Schritt f\xfcr Schritt durchgehen kann. Z.b. f\xfcgte ich in der `printfield()` Funktion die neuen, angepassten Strings (der Zahlenwert mit passender Anzahl Leerzeichen) HINTEN an die Liste, l\xf6schte sie jedoch nie, weshalb sich mein Spielfeld nicht Ver\xe4nderte, egal was ich als Input gab. Solche kleinen Fehler w\xe4ren mir sonst nicht aufgefallen.\\n\\n## Tipps:\\nWenn du auch so ein Programm schreibst, \xfcberleg dir manchmal zuerst, was du sp\xe4ter auch noch in die Funktion einf\xfcgen musst, damit du sie sp\xe4ter nicht nochmals schreiben musst. \\n\\nEbenfalls ist es hilfreich, wenn du deinen Funktionen und Variablen Namen gibst, die dir klar machen, was sie tun, sodass du den \xdcberblick behaltest. Aber mach die Namen auch nicht zu lange, denn es kann sehr m\xfchsam sein, den Namen `spielfeldnice[playerinputY][playerinputX]` in einer Funktion 4 mal zu schreiben.\\n\\n## Fazit\\nMit mehr Zeit, w\xe4ren noch viele Features mehr m\xf6glich gewesen. Da man aber nicht immer viel Zeit hat, sich die Zeit nicht nimmt, oder ein Problem hat, dass sich einfach nicht l\xf6sen will, bin ich ganz zufrieden mit meinem Resultat. Am Anfang stockte es, doch als ich im Neugeschriebenen Programm (fast) alle Probleme gefunden hatte, ging alles sehr schnell. Weitere Features zu implementieren w\xe4ren nicht die Komplizierteste Sache, jedoch muss man es machen, und nicht nur dar\xfcber Nachdenken\\n\\nAllem in allem war es ein Gro\xdfartiges Projekt."},{"id":"/2022/12/02/arbeiten-am-numtrip","metadata":{"permalink":"/ef_info/2022/12/02/arbeiten-am-numtrip","editUrl":"https://github.com/No0ne155/ef_info/tree/main/blog/2022-12-02-arbeiten-am-numtrip.md","source":"@site/blog/2022-12-02-arbeiten-am-numtrip.md","title":"Arbeiten am Numtrip","description":"Besprechung Benutzereingaben","date":"2022-12-02T00:00:00.000Z","formattedDate":"2. Dezember 2022","tags":[],"readingTime":1.52,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Finaler Blogbeitrag NumTrip","permalink":"/ef_info/2023/01/23/finaler-blogbeitrag-numtrip"},"nextItem":{"title":"Wiedereinstieg Python","permalink":"/ef_info/2022/08/26/wiedereinstieg-python"}},"content":"## Besprechung Benutzereingaben\\n\\nIch verglich mit Thomas den Code, und wir beide verwenden ein sehr \xe4hnliches system, was die Besprechung kurz hielt.\\n\\n## Arbeiten Numtrip\\nAls erstes habe ich den Auftrag gelesen, und ausgef\xfchrt.\\nIch passte das Programm von Wikipedia auf mein Programm an. Der Code sah wie folgt aus:\\n```\\ndef checkandremove(x, y, oldvalue, newvalue):\\n    if spielfeld[x][y] == oldvalue:\\n        spielfeld[x][y] = newvalue\\n        checkandremove(x,y+1,oldvalue,newvalue)\\n        checkandremove(x,y-1,oldvalue,newvalue)\\n        checkandremove(x+1,y,oldvalue,newvalue)\\n        checkandremove(x-1,y,oldvalue,newvalue)\\n        game()\\n```\\nNach ein paar tests bemerkte ich, dass wenn z.b. `x` bereits `4` ist, und dann `x+1` \xfcberpr\xfcft wird, dies ausserhalb der liste ist. Deshalb \xe4nderte ich den code zu dem:\\n```\\ndef checkandremove(x, y, oldvalue, newvalue):\\n    if spielfeld[x][y] == oldvalue:\\n        spielfeld[x][y] = newvalue\\n        if y+1 <= 4:\\n            checkandremove(x,y+1,oldvalue,newvalue)\\n        if y-1 >= 0:\\n            checkandremove(x,y-1,oldvalue,newvalue)\\n        if x+1 >= 0:\\n            checkandremove(x+1,y,oldvalue,newvalue)\\n        if x-1 <= 4:\\n            checkandremove(x-1,y,oldvalue,newvalue)\\n        game()\\n```\\nNach weiteren Tests, fiel mir noch ein gr\xf6sseres noch nicht gel\xf6stes Problem auf.\\n\\n![](images/numtrip_problem0.png)\\n\\nNehmen wir dieses Feld. Wenn nun der Player den input `X = 1, Y = 1` eingibt, kommt dieses Feld heraus:\\n\\n![](images/numtrip_problem1.png)\\n\\nIch fragte mich warum. Nach dem Betrachten des Codes wusste ich es.\\nAuf dieser Darstellung zeige ich es.\\n\\n![](images/numtrip_problem2.png)\\n\\nAls erstes wird von `1, 1` aus nach rechts gepr\xfcft. Auf diesem Feld wird dann als n\xe4chstes nach unten gepr\xfcft, und danach nach rechts (wo kein passendes Feld ist), und danach nach links, wo die letzte 4 ist, die entfernt wird. Von diesem Feld aus wird nun in alle richtungen \xfcberpr\xfcft, jedoch keine 4 mehr entdeckt. Die auf dem Bild Blau markierten Pfeile sollten noch gepr\xfcft und entfernt werden, dies passiert jedoch nicht, aufgrund der reihenfolge im code.\\n\\nIch \xfcberlegte den rest der Zeit noch daran, fand jedoch keine L\xf6sung f\xfcr den Code. Jedoch kann man dieses Beispiel l\xf6sen, indem der Spieler die Position `X = 0, Y = 3` w\xe4hlt.\\n\\n### L\xf6sung wird gesucht!!!"},{"id":"/2022/08/26/wiedereinstieg-python","metadata":{"permalink":"/ef_info/2022/08/26/wiedereinstieg-python","editUrl":"https://github.com/No0ne155/ef_info/tree/main/blog/2022-08-26-wiedereinstieg-python.md","source":"@site/blog/2022-08-26-wiedereinstieg-python.md","title":"Wiedereinstieg Python","description":"Heute, beim 2. mal EF, haben wir wieder mit Python angefangen, und einen Theorieblock gehabt.","date":"2022-08-26T00:00:00.000Z","formattedDate":"26. August 2022","tags":[],"readingTime":0.685,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Arbeiten am Numtrip","permalink":"/ef_info/2022/12/02/arbeiten-am-numtrip"}},"content":"Heute, beim 2. mal EF, haben wir wieder mit Python angefangen, und einen Theorieblock gehabt.\\n## Theorieblock\\nIm Theorieblock haben wir __Programmiersprachen__ angeschaut. Vor allem wie sie aufgebaut sind in den __Sprachstufen__. Ich will nicht einfach die Website abschreiben, also hier der Link: [Programmiersprachen](https://ofi.gbsl.website/24ef/Programmieren/Programmiersprachen)\\n\\n## Python\\nWir haben angefangen mit __Turtle__ Python zu repetieren. Zum gl\xfcck ist noch mehr oder weniger alles Pr\xe4sent, jedoch gab es einige Tippfehler. Das liegt jedoch daran, dass die \xdcbung fehlt. Am meisten ging der `:` bei einer `for` Schleife vergessen. Am zweitmeisten passierte ein fehler beim tippen von `forward`, `left` oder `right`. Jedoch kann man ja einfach `fd`, `lt` oder `rt` verwenden, wodurch das sehr minimiert wurde. \\n\\n## Blog\\nAm schluss haben wir noch angefangen diesen Blog hier zu schreiben. Ich schreibe aber nicht gerne, weshalb er nicht sehr Kreativ ist."}]}')}}]);